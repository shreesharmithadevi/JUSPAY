//{ Driver Code Starts
//Initial Template for Java


import java.util.*;
import java.lang.*;
import java.io.*;


class GFG{
    static class FastReader{ 
        BufferedReader br; 
        StringTokenizer st; 
  
        public FastReader(){ 
            br = new BufferedReader(new InputStreamReader(System.in)); 
        } 
  
        String next(){ 
            while (st == null || !st.hasMoreElements()){ 
                try{ st = new StringTokenizer(br.readLine()); } catch (IOException  e){ e.printStackTrace(); } 
            } 
            return st.nextToken(); 
        } 
  
        String nextLine(){ 
            String str = ""; 
            try{ str = br.readLine(); } catch (IOException e) { e.printStackTrace(); } 
            return str; 
        } 

        Integer nextInt(){
            return Integer.parseInt(next());
        }

        Long nextLong(){
            return Long.parseLong(next());
        }
    }

    public static void main(String[] args) throws IOException
    {
        FastReader sc = new FastReader();
        PrintWriter out = new PrintWriter(System.out);
        int t = sc.nextInt();
        while(t-- > 0){
            int N = sc.nextInt();
            int Edge[] = new int[N];
            for(int i = 0; i < N; i++)
                Edge[i] = sc.nextInt();
            Solution ob = new Solution();
            long ans = ob.largesSumCycle(N, Edge);
            out.println(ans);            
        }
        out.flush();
    }
}
// } Driver Code Ends


//User function Template for Java

class Solution{
    public long largesSumCycle(int N, int Edge[]){
        int count[] = new int[N];
        for(int i=0;i<N;i++){
            if(Edge[i]!=-1){
                count[Edge[i]]+=1;
            }
        }
        boolean[] vis = new boolean[N];
        Queue<Integer> q = new LinkedList<>();
        for(int i=0;i<count.length;i++){
            if(count[i]==0){
                vis[i]=true;
                q.add(i);
            }
        }
        while(!q.isEmpty()){
            int node = q.poll();
            if(Edge[node]==-1){
                continue;
            }
            --count[Edge[node]];
            if(count[Edge[node]]==0){
                vis[Edge[node]]=true;
                q.add(Edge[node]);
            }
        }
        long ans = -1;
        for(int i=0;i<N;i++){
            long val=0;
            if(vis[i])
                continue;
            for(int st=i;vis[st]==false;st=Edge[st]){
                vis[st]=true;
                val+=st;
            }
            ans = Math.max(ans,val);
        }
        return ans;
    }
}
